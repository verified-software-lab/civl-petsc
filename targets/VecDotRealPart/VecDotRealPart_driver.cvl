#include "petscvec.h"
#undef VecDotRealPart
PetscErrorCode VecDotRealPart(Vec x, Vec y, PetscReal *val);

$input int N_MIN, N_MAX, N;
$assume(N_MIN <= N && N <= N_MAX);

$input CIVL_RTYPE X_Real[N], Y_Real[N];
#ifdef USE_COMPLEX
$input CIVL_RTYPE X_Imag[N], Y_Imag[N];
#endif

int main(void) {
  MPI_Init(NULL, NULL);
  MPI_Comm comm = MPI_COMM_WORLD;
  int rank, size;
  MPI_Comm_size(comm, &size);
  MPI_Comm_rank(comm, &rank);
  $vec x = $vec_zero(0), y = $vec_zero(0);
  STYPE x_values[N], y_values[N];
  CIVL_RTYPE actual, expected;
  if (rank == 0) {
    for (int i = 0; i < N; i++) {
      x_values[i] = scalar_make(X_Real[i], X_Imag[i]);
      y_values[i] = scalar_make(Y_Real[i], Y_Imag[i]);
    }
    x = $vec_make_from_dense(N, x_values);
    y = $vec_make_from_dense(N, y_values);
    $print("VecDotRealPart_driver: nprocs = ", size, ", N = ", N, " ...\n");
#ifdef DEBUG
    $print("x: ");
    $vec_print(x);
    $print("\ny: ");
    $vec_print(y);
#endif
  }
  Vec p_x = CIVL_CivlToPetscVec(x, PETSC_DECIDE, comm);
  Vec p_y = CIVL_CivlToPetscVec(y, PETSC_DECIDE, comm);
  VecDotRealPart_spec(p_x, p_y, &expected);
  PetscErrorCode err_actual = VecDotRealPart(p_x, p_y, &actual);

  $assert(err_actual == 0);
#ifdef DEBUG
  if (rank == 0)
    $print("\nActual  : ", actual, "\n\nExpected: ", expected, "\n");
#endif
  $assert(actual == expected,
          "VecDotRealPart mismatch between actual and expected results.");
#ifndef DEBUG
  if (rank == 0)
    $print(" ok ");
#endif
  VecDestroy(&p_x);
  VecDestroy(&p_y);
  MPI_Finalize();
}
