#include "petscvec.h"
#include <assert.h>
#include <mpi.h>

$input int n;

int main(void) {
  MPI_Init(NULL, NULL);
  int rank;
  $vec c_x = $vec_zero(0), c_y = $vec_zero(0);
  STYPE x_values[n], y_values[n];
  CIVL_RTYPE actual = 0.0, expected = 0.0;

  MPI_Comm comm = MPI_COMM_WORLD;
  MPI_Comm_rank(comm, &rank);
  if (rank == 0) {
    for (int i = 0; i < n; i++) {
#ifdef USE_COMPLEX
      x_values[i] = $make_complex((double)(i + 1), 0.0);
      y_values[i] = $make_complex((double)(i + 2), 0.0);
#else
      x_values[i] = (double)(i + 1);
      y_values[i] = (double)(i + 2);
#endif
    }

#ifdef USE_COMPLEX
  $complex expected_dot = $make_complex(0.0,0.0);
#else
  CIVL_RTYPE expected_dot = 0.0;
#endif

    for (int i = 0; i < n; i++) {
#ifdef USE_COMPLEX
      expected_dot = $cadd(expected_dot, $cmul(x_values[i], y_values[i]));
#else
      expected_dot += x_values[i] * y_values[i];
#endif
    }
    expected = PetscRealPart(expected_dot);

    c_x = $vec_make_from_dense(n, x_values);
    c_y = $vec_make_from_dense(n, y_values);
    $print("\nVector x:\n");
    $vec_print(c_x);
    $print("\nVector y:\n");
    $vec_print(c_y);
  }
  Vec p_x = CIVL_CivlToPetscVec(c_x, PETSC_DECIDE, comm);
  Vec p_y = CIVL_CivlToPetscVec(c_y, PETSC_DECIDE, comm);
  PetscErrorCode err_actual = VecDotRealPart(p_x, p_y, &actual);
  $assert(err_actual == 0);
  $assert(actual == expected);

  if (rank == 0)
    $print("\nVecDot Real Part = ", actual,"\n");

  VecDestroy(&p_x);
  VecDestroy(&p_y);
  MPI_Finalize();
  return 0;
}
