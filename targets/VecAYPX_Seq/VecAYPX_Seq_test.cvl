#include "petscvec.h"
#include <mpi.h>
#include <stdio.h>

$input int n = 5;
$input double scale = 5;

int main(void) {
  MPI_Init(NULL, NULL);
  MPI_Comm comm = MPI_COMM_WORLD;
  int rank;
  MPI_Comm_rank(comm, &rank);
  // Vectors x and y
  $vec x = $vec_zero(n);
  $vec y = $vec_zero(n);
  $vec z = $vec_zero(n);

  STYPE x_values[n], y_values[n], beta = scalar_make(scale, 0.0), expected[n];

  if (rank == 0) {
    for (int i = 0; i < n; i++) {
      x_values[i] = scalar_make((double)(i + 1), 0.0);
      y_values[i] = scalar_make((double)(i + 1), 0.0);
      expected[i] = scalar_make(0.0, 0.0);
    }

        // Calculate expected results based on the value of beta
    for (int i = 0; i < N; i++) {
      if (scalar_eq(scalar_of(0.0), beta)) {
        // beta == 0: y remains unchanged
        expected[i] = y_values[i];
      } else if (scalar_eq(scalar_of(1.0), beta)) {
        // beta == 1: y = y + x
        expected[i] = scalar_add(y_values[i], x_values[i]);
      } else if (scalar_eq(scalar_of(-1.0), beta)) {
        // beta == -1: y = y - x
        expected[i] = scalar_sub(y_values[i], x_values[i]);
      } else {
        // y = beta * y + x
        STYPE scaled_y = scalar_mul(beta, y_values[i]);
        expected[i] = scalar_add(scaled_y, x_values[i]);
      }
    }

    x = $vec_make_from_dense(n, x_values);
    y = $vec_make_from_dense(n, y_values);
    z = $vec_make_from_dense(n, expected);

    $print("CIVL:");
    $print("Vector x:\n");
    $vec_print(x);
    $print("Vector y:\n");
    $vec_print(y);
  }

  Vec p_x = CIVL_CivlToPetscVec(x, PETSC_DECIDE, comm);
  Vec p_y = CIVL_CivlToPetscVec(y, PETSC_DECIDE, comm);
  Vec expectedAYPX = CIVL_CivlToPetscVec(z, PETSC_DECIDE, comm);
  PetscErrorCode err_actual = VecAYPX_Seq(p_y, beta, p_x);
  $assert(err_actual == 0);
  bool flg;
  VecEqual(p_y, expectedAYPX, &flg);
  $assert(flg == $true, "VecAYPX_Seq mismatch.");
  if (rank == 0) {
    $print("\n");
    $pathCondition();
  }
  CIVL_PrintVec("Actual   AYPX", p_y);
  CIVL_PrintVec("Expected AYPX", expectedAYPX);

  VecDestroy(&p_x);
  VecDestroy(&p_y);
  VecDestroy(&expectedAYPX);

  MPI_Finalize();
  return 0;
}
