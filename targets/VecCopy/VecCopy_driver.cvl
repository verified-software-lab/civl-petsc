#include "petscvec.h"
#undef VecCopy
PetscErrorCode VecCopy(Vec x, Vec y);

$input int N_MIN, N_MAX, N, NV;
$assume(N_MIN <= N && N <= N_MAX);

$input CIVL_RTYPE X_Real[N];
#ifdef USE_COMPLEX
$input CIVL_RTYPE X_Imag[N];
#endif

int main(void) {
  MPI_Init(NULL, NULL);
  MPI_Comm comm = MPI_COMM_WORLD;
  int rank, size;
  MPI_Comm_size(comm, &size);
  MPI_Comm_rank(comm, &rank);
  $vec x = $vec_zero(N), y = $vec_zero(N), expected = $vec_zero(N);
  STYPE x_values[N];
  if (rank == 0) {
    for (int i = 0; i < N; i++)
      x_values[i] = scalar_make(X_Real[i], X_Imag[i]);

    x = $vec_make_from_dense(N, x_values);
    $print("\nVecCopy_driver: nprocs = ", size, ", N = ", N, " ...");
#ifdef DEBUG
    $print("\nx: ");
    $vec_print(x);
    $print("y: ");
    $vec_print(y);
#endif
  }

  Vec p_x = CIVL_CivlToPetscVec(x, PETSC_DECIDE, comm);
  Vec p_y = CIVL_CivlToPetscVec(x, PETSC_DECIDE, comm);
  Vec p_expected = CIVL_CivlToPetscVec(expected, PETSC_DECIDE, comm);
  VecCopy_spec(p_x, p_expected);
  PetscErrorCode err_actual = VecCopy(p_x, p_y);
  $assert(err_actual == 0);
#ifdef DEBUG
  CIVL_PrintVec("Actual  ", p_y);
  CIVL_PrintVec("Expected", p_expected);
#endif
  bool flg;
  VecEqual(p_y, p_expected, &flg);
  $assert(flg, "VecCopy mismatch between actual and expected results.");
#ifndef DEBUG
  if (rank == 0)
    $print(" ok ");
#endif
  VecDestroy(&p_x);
  VecDestroy(&p_y);
  VecDestroy(&p_expected);
  MPI_Finalize();
}
