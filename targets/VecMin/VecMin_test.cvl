#include "petscvec.h"
#include <mpi.h>
#include <stdio.h>

$input int n = 4;

int main() {
  MPI_Init(NULL, NULL);
  MPI_Comm comm = MPI_COMM_WORLD;
  int rank, p_actual = 0, p_expected = 0;
  MPI_Comm_rank(comm, &rank);
  $vec x = $vec_zero(0);

  STYPE x_values[n];
  CIVL_RTYPE actual, expected = PETSC_MIN_REAL;

  if (rank == 0) {
    for (int i = 0; i < n; i++)
      x_values[i] = scalar_make((double)(i + 1), 0.0);

#ifdef USE_COMPLEX
    double a = $creal(x_values[0]);
#else
    double a = x_values[0];
#endif
    expected = a;
    p_expected = 0;

    for (int i = 0; i < n; i++) {
#ifdef USE_COMPLEX
      double a = $creal(x_values[i]);
#else
      double a = x_values[i];
#endif
      if (a < expected) {
        expected = a;
        p_expected = i;
      }
    }

    x = $vec_make_from_dense(n, x_values);

    $print("Vector x:\n");
    $vec_print(x);
  }
  /* Broadcast p_expected from rank 0 to all other ranks */
  MPI_Bcast(&p_expected, 1, MPI_INT, 0, comm);
  MPI_Bcast(&expected, 1, MPI_DOUBLE, 0, comm);

  Vec p_x = CIVL_CivlToPetscVec(x, PETSC_DECIDE, comm);
  PetscErrorCode err_actual = VecMin(p_x, &p_actual, &actual);

  $assert(err_actual == 0);
  $assert(p_actual == p_expected);
  $assert(actual == expected);

  if (rank == 0) {
    $pathCondition();
    $print("\nActual Vec Min   = ", actual, " at index ", p_actual, "\n",
           "Expected Vec Min = ", expected, " at index ", p_expected, "\n\n");
  }

  VecDestroy(&p_x);
  MPI_Finalize();
  return 0;
}
