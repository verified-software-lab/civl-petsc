#include "petscvec.h"
#include <mpi.h>
#include <stdio.h>

$input int n = 5;
$input double scal = 5;

int main(void) {
  MPI_Init(NULL, NULL);
  MPI_Comm comm = MPI_COMM_WORLD;
  int rank;
  MPI_Comm_rank(comm, &rank);
  // Vectors x and y
  $vec x = $vec_zero(n);
  $vec y = $vec_zero(n);
  $vec z = $vec_zero(n);

  STYPE x_values[n], y_values[n], alpha, expected[n];

#ifdef USE_COMPLEX
  alpha = $make_complex(scal, 0.0);
#else
  alpha = scal;
#endif

  if (rank == 0) {
    for (int i = 0; i < n; i++) {
#ifdef USE_COMPLEX
      x_values[i] = $make_complex((double)(i + 1), 0.0);
      y_values[i] = $make_complex((double)(i + 1), 0.0);
      expected[i] = $make_complex(0.0, 0.0);
#else
      x_values[i] = (double)(i + 1);
      y_values[i] = (double)(i + 1);
      expected[i] = 0.0;
#endif
    }

    for (int i = 0; i < n; i++) {
#ifdef USE_COMPLEX
      expected[i] = $cadd($cmul(alpha, x_values[i]), y_values[i]);
#else
      expected[i] = alpha * x_values[i] + y_values[i];
#endif
    }

    x = $vec_make_from_dense(n, x_values);
    y = $vec_make_from_dense(n, y_values);
    z = $vec_make_from_dense(n, expected);

    $print("CIVL:");
    $print("Vector x:\n");
    $vec_print(x);
    $print("Vector y:\n");
    $vec_print(y);
  }

  Vec p_x = CIVL_CivlToPetscVec(x, PETSC_DECIDE, comm);
  Vec p_y = CIVL_CivlToPetscVec(y, PETSC_DECIDE, comm);
  Vec expectedAXPY = CIVL_CivlToPetscVec(z, PETSC_DECIDE, comm);
  PetscErrorCode err_actual = VecAXPY(p_y, alpha, p_x);
  $assert(err_actual == 0);
  bool flg;
  VecEqual(p_y, expectedAXPY, &flg);
  $assert(flg == $true, "VecAXPY mismatch.");
  if (rank == 0) {
    $print("\n");
    $pathCondition();
  }
  CIVL_PrintVec("Actual   AXPY", p_y);
  CIVL_PrintVec("Expected AXPY", expectedAXPY);

  VecDestroy(&p_x);
  VecDestroy(&p_y);
  VecDestroy(&expectedAXPY);

  MPI_Finalize();
  return 0;
}
