#include "petscvec.h"
#include <mpi.h>
#include <pointer.cvh>
#include <stdio.h>
#undef VecGetValues

PetscErrorCode VecGetValues(Vec x, PetscInt ni, const PetscInt ix[],
                            PetscScalar y[]);

$input int N_MIN, N_MAX, N;
$assume(N_MIN <= N && N <= N_MAX);

$input int ni, B;
$assume(0 <= B && B <= N);
$assume(0 <= ni && ni <= B);

$input CIVL_RTYPE X_Real[N];
#ifdef USE_COMPLEX
$input CIVL_RTYPE X_Imag[N];
#endif

int main() {
  MPI_Init(NULL, NULL);
  MPI_Comm comm = MPI_COMM_WORLD;
  int rank, chosen_proc, nprocs, size;
  MPI_Comm_rank(comm, &rank);
  MPI_Comm_size(comm, &nprocs);

  $vec x = $vec_zero(N);

  if (rank == 0) {
    STYPE x_values[N];
    for (int i = 0; i < N; i++)
      x_values[i] = scalar_make(X_Real[i], X_Imag[i]);
    x = $vec_make_from_dense(N, x_values);
    $print("\nVecGetValues_driver: nprocs = ", nprocs, ", N = ", N,
           ", ni =", ni, ", B =", B, " ...");
#ifdef DEBUG
    $print("\nx: ");
    $vec_print(x);
#endif
    chosen_proc = $choose_int(nprocs);
  }

  MPI_Bcast(&chosen_proc, 1, MPI_INT, 0, comm);
  // Convert x to PETSc Vec for testing
  Vec p_x = CIVL_CivlToPetscVec(x, PETSC_DECIDE, comm);

  if (rank == chosen_proc) {
    int ix[ni];
    STYPE retrieved_values[ni], expected_values[ni];
    int elements_owned = ((p_x->map->rend) - (p_x->map->rstart));
    for (int j = 0; j < ni; j++)
      ix[j] = p_x->map->rstart + $choose_int(elements_owned);
#ifdef DEBUG
    $print("\n[Process ", chosen_proc, "] Indices ix: ");
    for (int j = 0; j < ni; j++) {
      $print(ix[j]);
      (j < ni - 1) ? $print(", ") : $print("\n");
    }
#endif
    VecGetValues_spec(p_x, ni, ix, expected_values);
    PetscErrorCode err_actual = VecGetValues(p_x, ni, ix, retrieved_values);
    $assert(err_actual == 0);
#ifdef DEBUG
    $print("\nActual  : ");
    for (int i = 0; i < ni; i++) {
      $print(retrieved_values[i]);
      (i < ni - 1) ? $print(", ") : $print("");
    }
    $print("\nExpected: ");
    for (int i = 0; i < ni; i++) {
      $print(expected_values[i]);
      (i < ni - 1) ? $print(", ") : $print("");
    }
    $print("\n");
#endif
    $assert($equals(&retrieved_values, &expected_values),
            "VecGetValues mismatch between actual and expected values.");
  }
#ifndef DEBUG
  if (rank == 0)
    $print(" ok ");
#endif
  VecDestroy(&p_x);
  MPI_Finalize();
}
