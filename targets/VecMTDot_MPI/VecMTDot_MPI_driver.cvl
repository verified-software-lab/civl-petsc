#include "petscvec.h"
#include <mpi.h>
#include <pointer.cvh>
#include <stdio.h>
#undef VecMTDot_MPI

PetscErrorCode VecMTDot_MPI(Vec x, PetscInt nv, const Vec y[],
                            PetscScalar val[]);

$input int N_MIN, N_MAX, N, NV_MAX = 3;
$assume(N_MIN <= N && N <= N_MAX); /* The size of vector x */
$input int nv;                     /* number of y[] vectors */
$assume(0 <= nv && nv <= NV_MAX);
$input CIVL_RTYPE X_Real[N], Y_Real[nv * N];
#ifdef USE_COMPLEX
$input CIVL_RTYPE X_Imag[N], Y_Imag[nv * N];
#endif

int main(void) {
  MPI_Init(NULL, NULL);
  MPI_Comm comm = MPI_COMM_WORLD;
  int rank, size;
  MPI_Comm_size(comm, &size);
  MPI_Comm_rank(comm, &rank);
  STYPE x_vals[N];
  for (int i = 0; i < N; i++)
    x_vals[i] = scalar_make(X_Real[i], X_Imag[i]);

  $vec civl_x = $vec_make_from_dense(N, x_vals);

  /* Prepare an array of CIVL vectors y[] of length nv */
  $vec civl_y[nv];
  for (int i = 0; i < nv; i++) {
    STYPE tmpArr[N];
    for (int j = 0; j < N; j++) {
      /* The j-th element of y[i] is Y_Real[i*N + j], Y_Imag[i*N + j] */
      tmpArr[j] = scalar_make(Y_Real[i * N + j], Y_Imag[i * N + j]);
    }
    civl_y[i] = $vec_make_from_dense(N, tmpArr);
  }
  if (rank == 0) {
    $print("\nVecMTDot_MPI_driver: nprocs=", size, ", N = ", N,
           ", Number of y[nv] vectors = ", nv, " ...");
#ifdef DEBUG
    $print("\nx: ");
    $vec_print(civl_x);
    for (int i = 0; i < nv; i++) {
      $print("y[", i, "]: ");
      $vec_print(civl_y[i]);
    }
#endif
  }
  STYPE val_ref[nv], val_actual[nv];
  Vec px = CIVL_CivlToPetscVec(civl_x, PETSC_DECIDE, comm);
  Vec py[nv];
  for (int i = 0; i < nv; i++)
    py[i] = CIVL_CivlToPetscVec(civl_y[i], PETSC_DECIDE, comm);

  VecMTDot_MPI_spec(px, nv, py, val_ref);
  PetscErrorCode err_actual = VecMTDot_MPI(px, nv, py, val_actual);

  $assert(err_actual == 0);
#ifdef DEBUG
  if (rank == 0) {
    $print("\nActual   = ");
    for (int i = 0; i < nv; i++)
      scalar_print(val_actual[i]);
    $print("\nExpected = ");
    for (int i = 0; i < nv; i++)
      scalar_print(val_ref[i]);
  }
#endif
  for (int i = 0; i < nv; i++) {
    $assert(scalar_eq(val_actual[i], val_ref[i]),
            "VecMTDot_MPI mismatch for Actual and expected values.");
  }
#ifndef DEBUG
  if (rank == 0)
    $print(" ok ");
#endif
  for (int i = 0; i < nv; i++)
    VecDestroy(&py[i]);
  VecDestroy(&px);
  MPI_Finalize();
}
