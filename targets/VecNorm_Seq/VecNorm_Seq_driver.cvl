/* CIVL driver for verification of function VecNorm_Seq.  A vector is
   distributed across all procs.  Each proc calls VecNorm_Seq to get
   the norm of its part of the vector.  This does not involve any MPI
   communication. */
#include <petscvec.h>
#include <pointer.cvh>
#undef VecNorm_Seq
$input int N_MIN, N_MAX, N;
$assume(N_MIN <= N && N <= N_MAX);
$input CIVL_RTYPE X_Real[N];
#ifdef USE_COMPLEX
$input CIVL_RTYPE X_Imag[N];
#endif

PetscErrorCode VecNorm_Seq(Vec xin, NormType type, PetscReal *z);

int main(void) {
  CIVL_RTYPE expected[2] = {0.0, 0.0}, actual[2] = {0.0, 0.0};
  int rank, size, normType;
  $vec x = $vec_zero(0);
  MPI_Init(NULL, NULL);
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);
  MPI_Comm_size(MPI_COMM_WORLD, &size);
  if (rank == 0) {
    $elaborate(N);
    normType = $choose_int(5);
    $print("\nVecNorm_Seq_driver: nprocs = ", size, ", N = ", N,
           ", normType = ", $petsc_norm_name(normType), " ...");
    STYPE value[N];
    for (int i = 0; i < N; i++)
      value[i] = scalar_make(X_Real[i], X_Imag[i]);
    x = $vec_make_from_dense(N, value);
#ifdef DEBUG
    $print("\nx = ");
    $vec_print(x);
    $print("\n");
#endif
  }
  Vec p_x1 = CIVL_CivlToPetscVec(x, PETSC_DECIDE, MPI_COMM_WORLD);
  MPI_Bcast(&normType, 1, MPI_INT, 0, MPI_COMM_WORLD);
  VecNorm_Seq_spec(p_x1, normType, expected);
  Vec p_x2 = CIVL_CivlToPetscVec(x, PETSC_DECIDE, MPI_COMM_WORLD);
  PetscErrorCode err_actual = VecNorm_Seq(p_x2, normType, actual);
  $assert(err_actual == 0);
  if (normType == NORM_1_AND_2) {
#ifdef DEBUG
    $print("Rank ", rank, ": actual   = ", actual, "\n",
           "expected = ", expected, "\n\n");
#endif
    $assert($equals(&actual, &expected), "Actual and expected are not equal\n");
  } else {
#ifdef DEBUG
    $print("Rank ", rank, ": actual   = ", actual[0], "\n",
           "expected = ", expected[0], "\n\n");
#endif
    $assert($equals(&actual[0], &expected[0]),
            "Actual and expected are not equal\n");
  }
  VecDestroy(&p_x1);
  VecDestroy(&p_x2);
  MPI_Finalize();
#ifndef DEBUG
  if (rank == 0)
    $print(" ok ");
#endif
}
