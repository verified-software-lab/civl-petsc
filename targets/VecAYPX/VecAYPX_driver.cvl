#include "petscvec.h"
#undef VecAYPX
PetscErrorCode VecAYPX(Vec y, PetscScalar beta, Vec x);

$input int N_MIN, N_MAX, N;
$assume(N_MIN <= N && N <= N_MAX);

$input CIVL_RTYPE X_Real[N], Y_Real[N], beta_Real;
#ifdef USE_COMPLEX
$input CIVL_RTYPE X_Imag[N], Y_Imag[N], beta_Imag;
#endif

int main(void) {
  MPI_Init(NULL, NULL);
  MPI_Comm comm = MPI_COMM_WORLD;
  int rank, size;
  MPI_Comm_size(comm, &size);
  MPI_Comm_rank(comm, &rank);
  // Vectors x and y
  $vec x = $vec_zero(N), y = $vec_zero(N);

  STYPE x_values[N], y_values[N], beta;
  beta = scalar_make(beta_Real, beta_Imag);

  if (rank == 0) {
    for (int i = 0; i < N; i++) {
      x_values[i] = scalar_make(X_Real[i], X_Imag[i]);
      y_values[i] = scalar_make(Y_Real[i], Y_Imag[i]);
    }

    x = $vec_make_from_dense(N, x_values);
    y = $vec_make_from_dense(N, y_values);

    $print("\nVecAYPX_driver: nprocs = ", size, ", N = ", N,
           ", Beta = ", beta, " ...");
#ifdef DEBUG
    $print("\nx: ");
    $vec_print(x);
    $print("\ny: ");
    $vec_print(y);
#endif
  }

  Vec p_x = CIVL_CivlToPetscVec(x, PETSC_DECIDE, comm);
  Vec p_y = CIVL_CivlToPetscVec(y, PETSC_DECIDE, comm);
  Vec expectedAYPX = CIVL_CivlToPetscVec(y, PETSC_DECIDE, comm);
  VecAYPX_spec(expectedAYPX, beta, p_x);
  PetscErrorCode err_actual = VecAYPX(p_y, beta, p_x);
  $assert(err_actual == 0);
#ifdef DEBUG
  CIVL_PrintVec("Actual   AYPX", p_y);
  CIVL_PrintVec("Expected AYPX", expectedAYPX);
#endif
  bool flg;
  VecEqual(p_y, expectedAYPX, &flg);
  $assert(flg, "VecAYPX mismatch between actual and expected results.");
#ifndef DEBUG
  if (rank == 0)
    $print(" ok ");
#endif
  VecDestroy(&p_x);
  VecDestroy(&p_y);
  VecDestroy(&expectedAYPX);
  MPI_Finalize();
}
