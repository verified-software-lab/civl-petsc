#include "petscvec.h"
#include <mpi.h>
#include <stdio.h>

$input int N_MIN, N_MAX, N;
$assume(N_MIN <= N && N <= N_MAX);
$input double scal = 5;

int main(void) {
  MPI_Init(NULL, NULL);
  MPI_Comm comm = MPI_COMM_WORLD;
  int rank;
  MPI_Comm_rank(comm, &rank);
  // Vectors x and y
  $vec x = $vec_zero(N);
  $vec y = $vec_zero(N);
  $vec z = $vec_zero(N);

  STYPE x_values[N], y_values[N], alpha, expected[N];

  alpha = scalar_make(scal, 0.0);

  if (rank == 0) {
    for (int i = 0; i < N; i++) {
      x_values[i] = scalar_make((double)(i + 1), 0.0);
      y_values[i] = scalar_make((double)(i + 1), 0.0);
      expected[i] = scalar_make(0.0, 0.0);
    }

    for (int i = 0; i < N; i++)
      expected[i] = scalar_add(scalar_mul(alpha, x_values[i]), y_values[i]);

    x = $vec_make_from_dense(N, x_values);
    y = $vec_make_from_dense(N, y_values);
    z = $vec_make_from_dense(N, expected);

    $print("x: ");
    $vec_print(x);
    $print("\ny: ");
    $vec_print(y);
  }

  Vec p_x = CIVL_CivlToPetscVec(x, PETSC_DECIDE, comm);
  Vec p_y = CIVL_CivlToPetscVec(y, PETSC_DECIDE, comm);
  Vec expectedAXPY = CIVL_CivlToPetscVec(z, PETSC_DECIDE, comm);
  PetscErrorCode err_actual = VecAXPY_Seq(p_y, alpha, p_x);
  $assert(err_actual == 0);
  bool flg;
  VecEqual(p_y, expectedAXPY, &flg);
  $assert(flg == $true, "VecAXPY_Seq mismatch.");
  if (rank == 0) {
    $print("\n");
    $pathCondition();
  }
  CIVL_PrintVec("Actual  ", p_y);
  CIVL_PrintVec("Expected", expectedAXPY);

  VecDestroy(&p_x);
  VecDestroy(&p_y);
  VecDestroy(&expectedAXPY);

  MPI_Finalize();
  return 0;
}
