/* CIVL driver for verification of function VecMax_MPI */
#include "petscvec.h"
#include <mpi.h>
#undef VecMax_MPI
$input int N_MIN, N_MAX, N;
$assume(N_MIN <= N && N <= N_MAX);
$input CIVL_RTYPE X_Real[N];
$assume($forall (int i:0 .. N-1) X_Real[i] >= PETSC_MIN_REAL);
#ifdef USE_COMPLEX
$input CIVL_RTYPE X_Imag[N];
#endif

PetscErrorCode VecMax_MPI(Vec x, PetscInt *p, PetscReal *val);

int main() {
  MPI_Init(NULL, NULL);
  MPI_Comm comm = MPI_COMM_WORLD;
  int rank, nprocs, i_actual, i_expected;
  MPI_Comm_rank(comm, &rank);
  MPI_Comm_size(comm, &nprocs);
  $vec x = $vec_zero(0);
  STYPE x_values[N];
  CIVL_RTYPE actual, expected;
  if (rank == 0) {
    for (int i = 0; i < N; i++)
      x_values[i] = scalar_make(X_Real[i], X_Imag[i]);
    x = $vec_make_from_dense(N, x_values);
    $print("\nVecMax_MPI_driver: nprocs = ", nprocs, ", N = ", N, " ...");
#ifdef DEBUG
    $print("\nx = "); $vec_print(x);
#endif
  }
  Vec p_x = CIVL_CivlToPetscVec(x, PETSC_DECIDE, comm);
  VecMax_MPI_spec(p_x, &i_expected, &expected);
  PetscErrorCode err_actual = VecMax_MPI(p_x, &i_actual, &actual);
#ifdef DEBUG
  if (rank == 0) {
    $print("\nActual Vec Max   = ", actual, " at index ", i_actual, "\n\n",
           "Expected Vec Max = ", expected, " at index ", i_expected, "\n\n");
  }
#endif
  $assert(err_actual == 0);
  $assert(actual == expected, "Value mismatch");
  $assert(i_actual == i_expected, "Index mismactch");
  if (rank == 0)
	  $print(" ok ");
  VecDestroy(&p_x);
  MPI_Finalize();
}
