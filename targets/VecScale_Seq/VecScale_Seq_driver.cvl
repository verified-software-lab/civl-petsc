#include "petscvec.h"
#undef VecScale_Seq
PetscErrorCode VecScale_Seq(Vec x, PetscScalar alpha);

$input int N_MIN, N_MAX, N;
$assume(N_MIN <= N && N <= N_MAX);

$input CIVL_RTYPE X_Real[N], alpha_Real;
#ifdef USE_COMPLEX
$input CIVL_RTYPE X_Imag[N], alpha_Imag;
#endif

int main() {
  MPI_Init(NULL, NULL);
  MPI_Comm comm = MPI_COMM_WORLD;
  int rank, size;
  MPI_Comm_size(comm, &size);
  MPI_Comm_rank(comm, &rank);
  $vec x = $vec_zero(N);
  STYPE x_values[N], alpha = scalar_make(alpha_Real, alpha_Imag);
  if (rank == 0) {
    for (int i = 0; i < N; i++)
      x_values[i] = scalar_make(X_Real[i], X_Imag[i]);
    x = $vec_make_from_dense(N, x_values);
    $print("\nVecScale_Seq_driver: nproc = ", size, ", N = ", N,
           ", alpha = ", alpha, " ...");
#ifdef DEBUG
    $print("\nx: ");
    $vec_print(x);
#endif
  }
  Vec p_x = CIVL_CivlToPetscVec(x, PETSC_DECIDE, comm);
  Vec p_expected = CIVL_CivlToPetscVec(x, PETSC_DECIDE, comm);
  VecScale_Seq_spec(p_expected, alpha);
  PetscErrorCode err_actual = VecScale_Seq(p_x, alpha);
  $assert(err_actual == 0);
#ifdef DEBUG
  CIVL_PrintVec("Actual  ", p_x);
  CIVL_PrintVec("Expected", p_expected);
#endif
  bool flg;
  VecEqual(p_x, p_expected, &flg);
  $assert(flg, "VecScale_Seq mismatch actual and expected values.");
  if (rank == 0)
    $print(" ok");
  VecDestroy(&p_x);
  VecDestroy(&p_expected);
  MPI_Finalize();
}
