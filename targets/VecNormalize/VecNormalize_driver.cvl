/* CIVL driver for VecNormalize.  Assumes the 2-norm of a vector is
   positive, then divides every component of that vector by the
   2-norm. */
#include <mpi.h>
#include <petscvec.h>
#undef VecNormalize
$input int N_MIN, N_MAX, N;
$assume(N_MIN <= N && N <= N_MAX);
$input CIVL_RTYPE A_Real[N];
#ifdef USE_COMPLEX
$input CIVL_RTYPE A_Imag[N];
#else
#endif

PetscErrorCode VecNormalize(Vec x, PetscReal *val);

int main(void) {
  MPI_Init(NULL, NULL);
  MPI_Comm comm = MPI_COMM_WORLD;
  int rank, size;
  MPI_Comm_size(comm, &size);
  MPI_Comm_rank(comm, &rank);
  $vec x = $vec_zero(N);
  if (rank == 0) {
    STYPE value[N];
    for (int i = 0; i < N; i++)
      value[i] = scalar_make(A_Real[i], A_Imag[i]);
    x = $vec_make_from_dense(N, value);
    $assume($vec_norm(x, 2) > 0.0);

    $print("\nVecNormalize_driver: nprocs = ", size, ", N = ", N, " ...");
#ifdef DEBUG
    $print("\nx: ");
    $vec_print(x);
#endif
  }
  Vec p_x = CIVL_CivlToPetscVec(x, PETSC_DECIDE, comm);
  Vec p_expected = CIVL_CivlToPetscVec(x, PETSC_DECIDE, comm);
  CIVL_RTYPE expected = 0.0, actual = 0.0;
  VecNormalize_spec(p_expected, &expected);
  PetscErrorCode err_actual = VecNormalize(p_x, &actual);
  $assert(err_actual == 0);
#ifdef DEBUG
  if (rank == 0)
    $print("\nActual   = ", actual, "\n", "Expected = ", expected, "\n");
#endif
  $assert(actual == expected);
#ifndef DEBUG
  if (rank == 0)
    $print(" ok ");
#endif
  VecDestroy(&p_x);
  VecDestroy(&p_expected);
  MPI_Finalize();
}
