#include <petscvec.h>
#undef VecNormAvailable

PetscErrorCode VecNormAvailable(Vec x, NormType type, PetscBool *available,
                                PetscReal *val);

$input int N_MIN, N_MAX, N;
$assume(N_MIN <= N && N <= N_MAX);
#ifdef USE_COMPLEX
$input CIVL_RTYPE A_Real[N], A_Imag[N];
#else
$input CIVL_RTYPE A_Real[N];
#endif

int main(void) {
  STYPE value[N];
  MPI_Init(NULL, NULL);
  MPI_Comm comm = MPI_COMM_WORLD;
  int rank, size, normType;
  MPI_Comm_size(comm, &size);
  MPI_Comm_rank(comm, &rank);
  $vec x = $vec_zero(N);
  if (rank == 0) {
    $elaborate(N);
    normType = $choose_int(5);
    STYPE value[N];
    for (int i = 0; i < N; i++)
      value[i] = scalar_make(A_Real[i], A_Imag[i]);

    x = $vec_make_from_dense(N, value);
    $print("\nVecNormAvailable_driver: nprocs = ", size, ", N = ", N,
           ", Type = ", $petsc_norm_name(normType), " ...");
#ifdef DEBUG
    $print("\nx: ");
    $vec_print(x);
#endif
  }
  Vec p_x = CIVL_CivlToPetscVec(x, PETSC_DECIDE, comm);
  bool before_avail, after_avail;
  PetscReal actual[2] = {0.0, 0.0};

  MPI_Bcast(&normType, 1, MPI_INT, 0, MPI_COMM_WORLD);
  if (rank == 0)
    $petsc_norm_name(normType);

  // Check if norm is available before computation
  PetscErrorCode err_before =
      VecNormAvailable(p_x, normType, &before_avail, actual);
#ifdef DEBUG
  $print("Before: NormType = ", normType,
         ", Available = ", (bool)before_avail, ", Actual = ", actual,
         "\n");
#endif
  if (!(normType == NORM_1_AND_2))
    $assert(!before_avail, "Norm should not be available initially.");

  VecNorm(p_x, normType, actual);

  PetscErrorCode err_after =
      VecNormAvailable(p_x, normType, &after_avail, actual);
#ifdef DEBUG
  $print("After: NormType = ", normType,
         ", Available = ", (bool)after_avail, ", Actual = ", actual, "\n");
#endif
  $assert(err_before == 0 && err_after == 0);
  if (!(normType == NORM_1_AND_2))
    $assert(after_avail, "Norm should be available after computation.");
#ifndef DEBUG
  if (rank == 0)
    $print(" ok ");
#endif
  VecDestroy(&p_x);
  MPI_Finalize();
}
